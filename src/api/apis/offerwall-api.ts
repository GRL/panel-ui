/* tslint:disable */
/* eslint-disable */
/**
 * General Research Full Service Brokerage API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost } from '../models';
import { HTTPValidationError } from '../models';
import { MarketplaceOfferwallResponse } from '../models';
import { OneShotOfferwallResponse } from '../models';
import { SingleEntryOfferWallResponse } from '../models';
import { SoftPairOfferwallResponse } from '../models';
import { StarwallOfferWallResponse } from '../models';
import { StarwallPlusBlockOfferWallResponse } from '../models';
import { StarwallPlusBlockRecontactOfferWallResponse } from '../models';
import { StarwallPlusOfferWallResponse } from '../models';
import { TopNOfferWallResponse } from '../models';
import { TopNPlusBlockOfferWallResponse } from '../models';
import { TopNPlusBlockRecontactOfferWallResponse } from '../models';
import { TopNPlusOfferWallResponse } from '../models';
import { WXETOfferwallResponse } from '../models';
/**
 * OfferwallApi - axios parameter creator
 * @export
 */
export const OfferwallApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns buckets grouped by marketplace, one per marketplace, with the tasks ordered by quality.
         * @summary Marketplace Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        marketplaceOfferwallProductIdOfferwall5fa23085Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling marketplaceOfferwallProductIdOfferwall5fa23085Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling marketplaceOfferwallProductIdOfferwall5fa23085Get.');
            }
            const localVarPath = `/{product_id}/offerwall/5fa23085/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a custom endpoint for a softpair-style offerwall that allows you to update profiling answers and then immediately get back the updated offerwall
         * @summary Offerwall Softpair Post
         * @param {BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost} body 
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} offerwallId The offerwall ID the user is interacting with
         * @param {any} sessionId A session id (uuid4.hex)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost: async (body: BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost, bpuid: any, productId: any, offerwallId: any, sessionId: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost.');
            }
            // verify required parameter 'offerwallId' is not null or undefined
            if (offerwallId === null || offerwallId === undefined) {
                throw new RequiredError('offerwallId','Required parameter offerwallId was null or undefined when calling offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost.');
            }
            // verify required parameter 'sessionId' is not null or undefined
            if (sessionId === null || sessionId === undefined) {
                throw new RequiredError('sessionId','Required parameter sessionId was null or undefined when calling offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost.');
            }
            const localVarPath = `/{product_id}/offerwall/37d1da64/{offerwall_id}/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"offerwall_id"}}`, encodeURIComponent(String(offerwallId)))
                .replace(`{${"session_id"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This offerwall contains tasks for which the user has a conditional eligibility. The questions that a user must answer to determine the eligibility are included within each bucket. Additionally, the question definitions are included for convenience.
         * @summary Offerwall Softpair
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [maxOptions] Max number of options an allowed question can have (allowed to be asked)
         * @param {any} [maxQuestions] Max number of missing questions on a single bin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offerwallSoftpairProductIdOfferwall37d1da64Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, maxOptions?: any, maxQuestions?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling offerwallSoftpairProductIdOfferwall37d1da64Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling offerwallSoftpairProductIdOfferwall37d1da64Get.');
            }
            const localVarPath = `/{product_id}/offerwall/37d1da64/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (maxOptions !== undefined) {
                localVarQueryParameter['max_options'] = maxOptions;
            }

            if (maxQuestions !== undefined) {
                localVarQueryParameter['max_questions'] = maxQuestions;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
         * @summary One Shot Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [sources] Restrict tasks to those from these marketplaces only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oneShotOfferwallProductIdOfferwall6f27b1aeGet: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, sources?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling oneShotOfferwallProductIdOfferwall6f27b1aeGet.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling oneShotOfferwallProductIdOfferwall6f27b1aeGet.');
            }
            const localVarPath = `/{product_id}/offerwall/6f27b1ae/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (sources !== undefined) {
                localVarQueryParameter['sources'] = sources;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Only returns a single bucket with the top scoring tasks.
         * @summary Single Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        singleOfferwallProductIdOfferwall5fl8bpv5Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling singleOfferwallProductIdOfferwall5fl8bpv5Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling singleOfferwallProductIdOfferwall5fl8bpv5Get.');
            }
            const localVarPath = `/{product_id}/offerwall/5fl8bpv5/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an offerwall with buckets that are clustered by setting as seeds the highest scoring surveys for each bin, then the rest are distributed according to their Euclidean distance using the bucket's features.
         * @summary Starwall Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starwallOfferwallProductIdOfferwallB59a2d2bGet: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling starwallOfferwallProductIdOfferwallB59a2d2bGet.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling starwallOfferwallProductIdOfferwallB59a2d2bGet.');
            }
            const localVarPath = `/{product_id}/offerwall/b59a2d2b/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
         * @summary Starwall Plus Block Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get.');
            }
            const localVarPath = `/{product_id}/offerwall/7fa1b3f4/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
         * @summary Starwall Plus Block Recontact Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get.');
            }
            const localVarPath = `/{product_id}/offerwall/630db2a4/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents.
         * @summary Starwall Plus Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        starwallPlusOfferwallProductIdOfferwall5481f322Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling starwallPlusOfferwallProductIdOfferwall5481f322Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling starwallPlusOfferwallProductIdOfferwall5481f322Get.');
            }
            const localVarPath = `/{product_id}/offerwall/5481f322/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an offerwall with buckets that are clustered by the `split_by` argument using KMeans clustering.
         * @summary Topn Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topNOfferwallProductIdOfferwall45b7228a7Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling topNOfferwallProductIdOfferwall45b7228a7Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling topNOfferwallProductIdOfferwall45b7228a7Get.');
            }
            const localVarPath = `/{product_id}/offerwall/45b7228a7/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
         * @summary Topn Plus Block Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topNPlusBlockOfferwallProductIdOfferwallD48cce47Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling topNPlusBlockOfferwallProductIdOfferwallD48cce47Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling topNPlusBlockOfferwallProductIdOfferwallD48cce47Get.');
            }
            const localVarPath = `/{product_id}/offerwall/d48cce47/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
         * @summary Topn Plus Block Recontact Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get.');
            }
            const localVarPath = `/{product_id}/offerwall/1e5f0af8/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents.
         * @summary Topn Plus Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topNPlusOfferwallProductIdOfferwallB145b803Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling topNPlusOfferwallProductIdOfferwallB145b803Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling topNPlusOfferwallProductIdOfferwallB145b803Get.');
            }
            const localVarPath = `/{product_id}/offerwall/b145b803/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            if (minBinSize !== undefined) {
                localVarQueryParameter['min_bin_size'] = minBinSize;
            }

            if (splitBy !== undefined) {
                localVarQueryParameter['split_by'] = splitBy;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
         * @summary Wxet Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        wXETOfferwallProductIdOfferwall55a4e1a9Get: async (productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling wXETOfferwallProductIdOfferwall55a4e1a9Get.');
            }
            // verify required parameter 'bpuid' is not null or undefined
            if (bpuid === null || bpuid === undefined) {
                throw new RequiredError('bpuid','Required parameter bpuid was null or undefined when calling wXETOfferwallProductIdOfferwall55a4e1a9Get.');
            }
            const localVarPath = `/{product_id}/offerwall/55a4e1a9/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (ip !== undefined) {
                localVarQueryParameter['ip'] = ip;
            }

            if (countryIso !== undefined) {
                localVarQueryParameter['country_iso'] = countryIso;
            }

            if (languages !== undefined) {
                localVarQueryParameter['languages'] = languages;
            }

            if (behavior !== undefined) {
                localVarQueryParameter['behavior'] = behavior;
            }

            if (minPayout !== undefined) {
                localVarQueryParameter['min_payout'] = minPayout;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (nBins !== undefined) {
                localVarQueryParameter['n_bins'] = nBins;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OfferwallApi - functional programming interface
 * @export
 */
export const OfferwallApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns buckets grouped by marketplace, one per marketplace, with the tasks ordered by quality.
         * @summary Marketplace Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceOfferwallProductIdOfferwall5fa23085Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<MarketplaceOfferwallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).marketplaceOfferwallProductIdOfferwall5fa23085Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, minBinSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This is a custom endpoint for a softpair-style offerwall that allows you to update profiling answers and then immediately get back the updated offerwall
         * @summary Offerwall Softpair Post
         * @param {BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost} body 
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} offerwallId The offerwall ID the user is interacting with
         * @param {any} sessionId A session id (uuid4.hex)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost(body: BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost, bpuid: any, productId: any, offerwallId: any, sessionId: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SoftPairOfferwallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost(body, bpuid, productId, offerwallId, sessionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This offerwall contains tasks for which the user has a conditional eligibility. The questions that a user must answer to determine the eligibility are included within each bucket. Additionally, the question definitions are included for convenience.
         * @summary Offerwall Softpair
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [maxOptions] Max number of options an allowed question can have (allowed to be asked)
         * @param {any} [maxQuestions] Max number of missing questions on a single bin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerwallSoftpairProductIdOfferwall37d1da64Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, maxOptions?: any, maxQuestions?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SoftPairOfferwallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).offerwallSoftpairProductIdOfferwall37d1da64Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, maxOptions, maxQuestions, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
         * @summary One Shot Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [sources] Restrict tasks to those from these marketplaces only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oneShotOfferwallProductIdOfferwall6f27b1aeGet(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, sources?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OneShotOfferwallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).oneShotOfferwallProductIdOfferwall6f27b1aeGet(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, sources, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Only returns a single bucket with the top scoring tasks.
         * @summary Single Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleOfferwallProductIdOfferwall5fl8bpv5Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SingleEntryOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).singleOfferwallProductIdOfferwall5fl8bpv5Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, minBinSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an offerwall with buckets that are clustered by setting as seeds the highest scoring surveys for each bin, then the rest are distributed according to their Euclidean distance using the bucket's features.
         * @summary Starwall Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallOfferwallProductIdOfferwallB59a2d2bGet(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StarwallOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).starwallOfferwallProductIdOfferwallB59a2d2bGet(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
         * @summary Starwall Plus Block Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StarwallPlusBlockOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
         * @summary Starwall Plus Block Recontact Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StarwallPlusBlockRecontactOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents.
         * @summary Starwall Plus Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallPlusOfferwallProductIdOfferwall5481f322Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<StarwallPlusOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).starwallPlusOfferwallProductIdOfferwall5481f322Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an offerwall with buckets that are clustered by the `split_by` argument using KMeans clustering.
         * @summary Topn Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNOfferwallProductIdOfferwall45b7228a7Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TopNOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).topNOfferwallProductIdOfferwall45b7228a7Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
         * @summary Topn Plus Block Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNPlusBlockOfferwallProductIdOfferwallD48cce47Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TopNPlusBlockOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).topNPlusBlockOfferwallProductIdOfferwallD48cce47Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
         * @summary Topn Plus Block Recontact Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TopNPlusBlockRecontactOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents.
         * @summary Topn Plus Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNPlusOfferwallProductIdOfferwallB145b803Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TopNPlusOfferWallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).topNPlusOfferwallProductIdOfferwallB145b803Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
         * @summary Wxet Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wXETOfferwallProductIdOfferwall55a4e1a9Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<WXETOfferwallResponse>>> {
            const localVarAxiosArgs = await OfferwallApiAxiosParamCreator(configuration).wXETOfferwallProductIdOfferwall55a4e1a9Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OfferwallApi - factory interface
 * @export
 */
export const OfferwallApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns buckets grouped by marketplace, one per marketplace, with the tasks ordered by quality.
         * @summary Marketplace Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async marketplaceOfferwallProductIdOfferwall5fa23085Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<MarketplaceOfferwallResponse>> {
            return OfferwallApiFp(configuration).marketplaceOfferwallProductIdOfferwall5fa23085Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, minBinSize, options).then((request) => request(axios, basePath));
        },
        /**
         * This is a custom endpoint for a softpair-style offerwall that allows you to update profiling answers and then immediately get back the updated offerwall
         * @summary Offerwall Softpair Post
         * @param {BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost} body 
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} offerwallId The offerwall ID the user is interacting with
         * @param {any} sessionId A session id (uuid4.hex)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost(body: BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost, bpuid: any, productId: any, offerwallId: any, sessionId: any, options?: AxiosRequestConfig): Promise<AxiosResponse<SoftPairOfferwallResponse>> {
            return OfferwallApiFp(configuration).offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost(body, bpuid, productId, offerwallId, sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * This offerwall contains tasks for which the user has a conditional eligibility. The questions that a user must answer to determine the eligibility are included within each bucket. Additionally, the question definitions are included for convenience.
         * @summary Offerwall Softpair
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [maxOptions] Max number of options an allowed question can have (allowed to be asked)
         * @param {any} [maxQuestions] Max number of missing questions on a single bin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offerwallSoftpairProductIdOfferwall37d1da64Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, maxOptions?: any, maxQuestions?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<SoftPairOfferwallResponse>> {
            return OfferwallApiFp(configuration).offerwallSoftpairProductIdOfferwall37d1da64Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, maxOptions, maxQuestions, options).then((request) => request(axios, basePath));
        },
        /**
         * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
         * @summary One Shot Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [sources] Restrict tasks to those from these marketplaces only.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oneShotOfferwallProductIdOfferwall6f27b1aeGet(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, sources?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<OneShotOfferwallResponse>> {
            return OfferwallApiFp(configuration).oneShotOfferwallProductIdOfferwall6f27b1aeGet(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, sources, options).then((request) => request(axios, basePath));
        },
        /**
         * Only returns a single bucket with the top scoring tasks.
         * @summary Single Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async singleOfferwallProductIdOfferwall5fl8bpv5Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<SingleEntryOfferWallResponse>> {
            return OfferwallApiFp(configuration).singleOfferwallProductIdOfferwall5fl8bpv5Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, minBinSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an offerwall with buckets that are clustered by setting as seeds the highest scoring surveys for each bin, then the rest are distributed according to their Euclidean distance using the bucket's features.
         * @summary Starwall Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallOfferwallProductIdOfferwallB59a2d2bGet(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<StarwallOfferWallResponse>> {
            return OfferwallApiFp(configuration).starwallOfferwallProductIdOfferwallB59a2d2bGet(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
         * @summary Starwall Plus Block Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<StarwallPlusBlockOfferWallResponse>> {
            return OfferwallApiFp(configuration).starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
         * @summary Starwall Plus Block Recontact Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<StarwallPlusBlockRecontactOfferWallResponse>> {
            return OfferwallApiFp(configuration).starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as the StarwallOfferWall, but the buckets include contents.
         * @summary Starwall Plus Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async starwallPlusOfferwallProductIdOfferwall5481f322Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<StarwallPlusOfferWallResponse>> {
            return OfferwallApiFp(configuration).starwallPlusOfferwallProductIdOfferwall5481f322Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an offerwall with buckets that are clustered by the `split_by` argument using KMeans clustering.
         * @summary Topn Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNOfferwallProductIdOfferwall45b7228a7Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<TopNOfferWallResponse>> {
            return OfferwallApiFp(configuration).topNOfferwallProductIdOfferwall45b7228a7Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
         * @summary Topn Plus Block Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNPlusBlockOfferwallProductIdOfferwallD48cce47Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<TopNPlusBlockOfferWallResponse>> {
            return OfferwallApiFp(configuration).topNPlusBlockOfferwallProductIdOfferwallD48cce47Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
         * @summary Topn Plus Block Recontact Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<TopNPlusBlockRecontactOfferWallResponse>> {
            return OfferwallApiFp(configuration).topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Same as the TopNOfferWall, but the buckets include contents.
         * @summary Topn Plus Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
         * @param {any} [splitBy] Cluster tasks by payout or duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topNPlusOfferwallProductIdOfferwallB145b803Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<TopNPlusOfferWallResponse>> {
            return OfferwallApiFp(configuration).topNPlusOfferwallProductIdOfferwallB145b803Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
         * @summary Wxet Offerwall
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
         * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
         * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
         * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
         * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
         * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
         * @param {any} [duration] Maximum length of desired task (in seconds).
         * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async wXETOfferwallProductIdOfferwall55a4e1a9Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<WXETOfferwallResponse>> {
            return OfferwallApiFp(configuration).wXETOfferwallProductIdOfferwall55a4e1a9Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OfferwallApi - object-oriented interface
 * @export
 * @class OfferwallApi
 * @extends {BaseAPI}
 */
export class OfferwallApi extends BaseAPI {
    /**
     * Returns buckets grouped by marketplace, one per marketplace, with the tasks ordered by quality.
     * @summary Marketplace Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async marketplaceOfferwallProductIdOfferwall5fa23085Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<MarketplaceOfferwallResponse>> {
        return OfferwallApiFp(this.configuration).marketplaceOfferwallProductIdOfferwall5fa23085Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, minBinSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This is a custom endpoint for a softpair-style offerwall that allows you to update profiling answers and then immediately get back the updated offerwall
     * @summary Offerwall Softpair Post
     * @param {BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost} body 
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} offerwallId The offerwall ID the user is interacting with
     * @param {any} sessionId A session id (uuid4.hex)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost(body: BodyOfferwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost, bpuid: any, productId: any, offerwallId: any, sessionId: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<SoftPairOfferwallResponse>> {
        return OfferwallApiFp(this.configuration).offerwallSoftpairPostProductIdOfferwall37d1da64OfferwallIdPost(body, bpuid, productId, offerwallId, sessionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This offerwall contains tasks for which the user has a conditional eligibility. The questions that a user must answer to determine the eligibility are included within each bucket. Additionally, the question definitions are included for convenience.
     * @summary Offerwall Softpair
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [maxOptions] Max number of options an allowed question can have (allowed to be asked)
     * @param {any} [maxQuestions] Max number of missing questions on a single bin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async offerwallSoftpairProductIdOfferwall37d1da64Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, maxOptions?: any, maxQuestions?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<SoftPairOfferwallResponse>> {
        return OfferwallApiFp(this.configuration).offerwallSoftpairProductIdOfferwall37d1da64Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, maxOptions, maxQuestions, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
     * @summary One Shot Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [sources] Restrict tasks to those from these marketplaces only.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async oneShotOfferwallProductIdOfferwall6f27b1aeGet(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, sources?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<OneShotOfferwallResponse>> {
        return OfferwallApiFp(this.configuration).oneShotOfferwallProductIdOfferwall6f27b1aeGet(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, sources, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Only returns a single bucket with the top scoring tasks.
     * @summary Single Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async singleOfferwallProductIdOfferwall5fl8bpv5Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, minBinSize?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<SingleEntryOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).singleOfferwallProductIdOfferwall5fl8bpv5Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, minBinSize, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an offerwall with buckets that are clustered by setting as seeds the highest scoring surveys for each bin, then the rest are distributed according to their Euclidean distance using the bucket's features.
     * @summary Starwall Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async starwallOfferwallProductIdOfferwallB59a2d2bGet(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<StarwallOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).starwallOfferwallProductIdOfferwallB59a2d2bGet(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Same as the StarwallOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
     * @summary Starwall Plus Block Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<StarwallPlusBlockOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).starwallPlusBlockOfferwallProductIdOfferwall7fa1b3f4Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Same as the StarwallOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
     * @summary Starwall Plus Block Recontact Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<StarwallPlusBlockRecontactOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).starwallPlusBlockRecontactOfferwallProductIdOfferwall630db2a4Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Same as the StarwallOfferWall, but the buckets include contents.
     * @summary Starwall Plus Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async starwallPlusOfferwallProductIdOfferwall5481f322Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<StarwallPlusOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).starwallPlusOfferwallProductIdOfferwall5481f322Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns an offerwall with buckets that are clustered by the `split_by` argument using KMeans clustering.
     * @summary Topn Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async topNOfferwallProductIdOfferwall45b7228a7Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<TopNOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).topNOfferwallProductIdOfferwall45b7228a7Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Same as the TopNOfferWall, but the buckets include contents and no buckets are returned if the user is blocked.
     * @summary Topn Plus Block Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async topNPlusBlockOfferwallProductIdOfferwallD48cce47Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<TopNPlusBlockOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).topNPlusBlockOfferwallProductIdOfferwallD48cce47Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Same as the TopNOfferWall, but the buckets include contents, no buckets are returned if the user is blocked, and each bucket includes a `is_recontact` key.
     * @summary Topn Plus Block Recontact Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<TopNPlusBlockRecontactOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).topNPlusBlockRecontactOfferwallProductIdOfferwall1e5f0af8Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Same as the TopNOfferWall, but the buckets include contents.
     * @summary Topn Plus Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {any} [minBinSize] Minimum number of tasks that need to be in a bucket
     * @param {any} [splitBy] Cluster tasks by payout or duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async topNPlusOfferwallProductIdOfferwallB145b803Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, minBinSize?: any, splitBy?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<TopNPlusOfferWallResponse>> {
        return OfferwallApiFp(this.configuration).topNPlusOfferwallProductIdOfferwallB145b803Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, minBinSize, splitBy, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Each bucket has only 1 single task, and only basic info is returned     about each bucket.
     * @summary Wxet Offerwall
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} bpuid A unique identifier for each user, which is set by the Supplier. Must be consistent across respondent entrances and unique to the platform. It should not contain any sensitive information like email or names, and should avoid using any incrementing values.
     * @param {any} [ip] Respondent&#x27;s IP address (IPv4 or IPv6). Either &#x27;ip&#x27; must be provided, or &#x27;country_iso&#x27; must be provided if &#x27;ip&#x27; is not provided.
     * @param {any} [countryIso] Respondent&#x27;s country code (ISO 3166-1 alpha-2, lowercase)
     * @param {any} [languages] Respondent&#x27;s desired languages (ISO 639-2/B, lowercase)
     * @param {any} [behavior] Allows using custom scoring functions. Please discuss directly with GRL.
     * @param {any} [minPayout] Decimal representation of the minimum amount of USD that any of the tasks will pay
     * @param {any} [duration] Maximum length of desired task (in seconds).
     * @param {any} [nBins] Number of bins requested in the offerwall. If n_bins&#x3D;1 there is no grouping and you get all      duration + payout metrics on across all (as shown by the  availability_count).     n_bins&#x3D;0 will return back an empty bucket array, however, the availability_count will still show      the total opportunities available for that bpuid + passed in parameter settings.     n_bins&#x3D;∞ (or any positive integer) will return back the total number of bins capable of being uniquely split.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OfferwallApi
     */
    public async wXETOfferwallProductIdOfferwall55a4e1a9Get(productId: any, bpuid: any, ip?: any, countryIso?: any, languages?: any, behavior?: any, minPayout?: any, duration?: any, nBins?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<WXETOfferwallResponse>> {
        return OfferwallApiFp(this.configuration).wXETOfferwallProductIdOfferwall55a4e1a9Get(productId, bpuid, ip, countryIso, languages, behavior, minPayout, duration, nBins, options).then((request) => request(this.axios, this.basePath));
    }
}
