/* tslint:disable */
/* eslint-disable */
/**
 * General Research Full Service Brokerage API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { HTTPValidationError } from '../models';
import { StatusInfoResponseFail } from '../models';
import { StatusResponseFailure } from '../models';
import { TaskStatusResponseOut } from '../models';
import { TasksStatusResponseOut } from '../models';
/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the status of a session by a specific Task Status ID (`tsid`) that is provided in the redirect.  Given a `tsid`, get back the status of the wall event. This endpoint conflates the idea of a wall event and a session, but for these purposes, the status and payout of the last wall event in a session equals the status and payout for the session.
         * @summary Get Task Status
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} tsid A unique identifier for the session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatusProductIdStatusTsidGet: async (productId: any, tsid: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling getTaskStatusProductIdStatusTsidGet.');
            }
            // verify required parameter 'tsid' is not null or undefined
            if (tsid === null || tsid === undefined) {
                throw new RequiredError('tsid','Required parameter tsid was null or undefined when calling getTaskStatusProductIdStatusTsidGet.');
            }
            const localVarPath = `/{product_id}/status/{tsid}/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)))
                .replace(`{${"tsid"}}`, encodeURIComponent(String(tsid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Task Statuses
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} [bpuid] A unique identifier for each user, which is set by the Supplier. Filters the returned task status to only include those done by this user.
         * @param {any} [startedAfter] (unix timestamp) Retrieve sessions which were started after this timestamp. If &#x60;NULL&#x60;, default is 10 days ago.
         * @param {any} [startedBefore] (unix timestamp) Retrieve sessions which were started before this timestamp. If &#x60;NULL&#x60;, default is now.
         * @param {any} [status] Filter for sessions with this status. See Task Status for description of status.
         * @param {any} [reconciled] Only retrieve sessions that have been adjusted. If &#x60;reconciled&#x60; is True, &#x60;adjusted_after&#x60; is required.
         * @param {any} [adjustedAfter] (unix timestamp) Retrieve sessions which were adjusted after this timestamp.
         * @param {any} [adjustedBefore] (unix timestamp) Retrieve sessions which were adjusted before this timestamp. Default is now.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTaskStatusesProductIdStatusGet: async (productId: any, bpuid?: any, startedAfter?: any, startedBefore?: any, status?: any, reconciled?: any, adjustedAfter?: any, adjustedBefore?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling listTaskStatusesProductIdStatusGet.');
            }
            const localVarPath = `/{product_id}/status/`
                .replace(`{${"product_id"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bpuid !== undefined) {
                localVarQueryParameter['bpuid'] = bpuid;
            }

            if (startedAfter !== undefined) {
                localVarQueryParameter['started_after'] = startedAfter;
            }

            if (startedBefore !== undefined) {
                localVarQueryParameter['started_before'] = startedBefore;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (reconciled !== undefined) {
                localVarQueryParameter['reconciled'] = reconciled;
            }

            if (adjustedAfter !== undefined) {
                localVarQueryParameter['adjusted_after'] = adjustedAfter;
            }

            if (adjustedBefore !== undefined) {
                localVarQueryParameter['adjusted_before'] = adjustedBefore;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieve the status of a session by a specific Task Status ID (`tsid`) that is provided in the redirect.  Given a `tsid`, get back the status of the wall event. This endpoint conflates the idea of a wall event and a session, but for these purposes, the status and payout of the last wall event in a session equals the status and payout for the session.
         * @summary Get Task Status
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} tsid A unique identifier for the session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskStatusProductIdStatusTsidGet(productId: any, tsid: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TaskStatusResponseOut>>> {
            const localVarAxiosArgs = await StatusApiAxiosParamCreator(configuration).getTaskStatusProductIdStatusTsidGet(productId, tsid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary List Task Statuses
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} [bpuid] A unique identifier for each user, which is set by the Supplier. Filters the returned task status to only include those done by this user.
         * @param {any} [startedAfter] (unix timestamp) Retrieve sessions which were started after this timestamp. If &#x60;NULL&#x60;, default is 10 days ago.
         * @param {any} [startedBefore] (unix timestamp) Retrieve sessions which were started before this timestamp. If &#x60;NULL&#x60;, default is now.
         * @param {any} [status] Filter for sessions with this status. See Task Status for description of status.
         * @param {any} [reconciled] Only retrieve sessions that have been adjusted. If &#x60;reconciled&#x60; is True, &#x60;adjusted_after&#x60; is required.
         * @param {any} [adjustedAfter] (unix timestamp) Retrieve sessions which were adjusted after this timestamp.
         * @param {any} [adjustedBefore] (unix timestamp) Retrieve sessions which were adjusted before this timestamp. Default is now.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTaskStatusesProductIdStatusGet(productId: any, bpuid?: any, startedAfter?: any, startedBefore?: any, status?: any, reconciled?: any, adjustedAfter?: any, adjustedBefore?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<TasksStatusResponseOut>>> {
            const localVarAxiosArgs = await StatusApiAxiosParamCreator(configuration).listTaskStatusesProductIdStatusGet(productId, bpuid, startedAfter, startedBefore, status, reconciled, adjustedAfter, adjustedBefore, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieve the status of a session by a specific Task Status ID (`tsid`) that is provided in the redirect.  Given a `tsid`, get back the status of the wall event. This endpoint conflates the idea of a wall event and a session, but for these purposes, the status and payout of the last wall event in a session equals the status and payout for the session.
         * @summary Get Task Status
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} tsid A unique identifier for the session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskStatusProductIdStatusTsidGet(productId: any, tsid: any, options?: AxiosRequestConfig): Promise<AxiosResponse<TaskStatusResponseOut>> {
            return StatusApiFp(configuration).getTaskStatusProductIdStatusTsidGet(productId, tsid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Task Statuses
         * @param {any} productId The Brokerage Product ID provided by GRL.
         * @param {any} [bpuid] A unique identifier for each user, which is set by the Supplier. Filters the returned task status to only include those done by this user.
         * @param {any} [startedAfter] (unix timestamp) Retrieve sessions which were started after this timestamp. If &#x60;NULL&#x60;, default is 10 days ago.
         * @param {any} [startedBefore] (unix timestamp) Retrieve sessions which were started before this timestamp. If &#x60;NULL&#x60;, default is now.
         * @param {any} [status] Filter for sessions with this status. See Task Status for description of status.
         * @param {any} [reconciled] Only retrieve sessions that have been adjusted. If &#x60;reconciled&#x60; is True, &#x60;adjusted_after&#x60; is required.
         * @param {any} [adjustedAfter] (unix timestamp) Retrieve sessions which were adjusted after this timestamp.
         * @param {any} [adjustedBefore] (unix timestamp) Retrieve sessions which were adjusted before this timestamp. Default is now.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTaskStatusesProductIdStatusGet(productId: any, bpuid?: any, startedAfter?: any, startedBefore?: any, status?: any, reconciled?: any, adjustedAfter?: any, adjustedBefore?: any, options?: AxiosRequestConfig): Promise<AxiosResponse<TasksStatusResponseOut>> {
            return StatusApiFp(configuration).listTaskStatusesProductIdStatusGet(productId, bpuid, startedAfter, startedBefore, status, reconciled, adjustedAfter, adjustedBefore, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * Retrieve the status of a session by a specific Task Status ID (`tsid`) that is provided in the redirect.  Given a `tsid`, get back the status of the wall event. This endpoint conflates the idea of a wall event and a session, but for these purposes, the status and payout of the last wall event in a session equals the status and payout for the session.
     * @summary Get Task Status
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} tsid A unique identifier for the session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public async getTaskStatusProductIdStatusTsidGet(productId: any, tsid: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<TaskStatusResponseOut>> {
        return StatusApiFp(this.configuration).getTaskStatusProductIdStatusTsidGet(productId, tsid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary List Task Statuses
     * @param {any} productId The Brokerage Product ID provided by GRL.
     * @param {any} [bpuid] A unique identifier for each user, which is set by the Supplier. Filters the returned task status to only include those done by this user.
     * @param {any} [startedAfter] (unix timestamp) Retrieve sessions which were started after this timestamp. If &#x60;NULL&#x60;, default is 10 days ago.
     * @param {any} [startedBefore] (unix timestamp) Retrieve sessions which were started before this timestamp. If &#x60;NULL&#x60;, default is now.
     * @param {any} [status] Filter for sessions with this status. See Task Status for description of status.
     * @param {any} [reconciled] Only retrieve sessions that have been adjusted. If &#x60;reconciled&#x60; is True, &#x60;adjusted_after&#x60; is required.
     * @param {any} [adjustedAfter] (unix timestamp) Retrieve sessions which were adjusted after this timestamp.
     * @param {any} [adjustedBefore] (unix timestamp) Retrieve sessions which were adjusted before this timestamp. Default is now.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public async listTaskStatusesProductIdStatusGet(productId: any, bpuid?: any, startedAfter?: any, startedBefore?: any, status?: any, reconciled?: any, adjustedAfter?: any, adjustedBefore?: any, options?: AxiosRequestConfig) : Promise<AxiosResponse<TasksStatusResponseOut>> {
        return StatusApiFp(this.configuration).listTaskStatusesProductIdStatusGet(productId, bpuid, startedAfter, startedBefore, status, reconciled, adjustedAfter, adjustedBefore, options).then((request) => request(this.axios, this.basePath));
    }
}
